{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How Battlefield 2 Hooks Python BF2 Engine Interaction with Python Overview This section describes how the BF2 engine interacts with the embedded Python interpreter, detailing the initialization process, module imports, and event handling. Python Initialization When the BF2 engine starts, it initializes its embedded Python interpreter with its sys.path set to include the following directories: Python Standard Library : Located in the file: Battlefield 2 Server/pylib-2.3.4.zip Battlefield 2 Server Python Directory : The directory: Battlefield 2 Server/python Python Directory of the Current Mod : Example: Battlefield 2 Server/mods/bf2/python If the server switches mods, this path will change accordingly. Note that the BF2 game engine does not switch mods automatically between rounds. A mod remains loaded until the server is manually stopped, reconfigured, and restarted. Admin Directory : The directory: Battlefield 2 Server/admin Importing the bf2 Package The BF2 engine imports the bf2 package, which is located in the Battlefield 2 Server/python directory. During this process: The __init__.py module in the bf2 package is executed. This module imports and instantiates the basic code and objects required for the game, including game.scoringCommon from the active mod\u2019s Python directory (this is the only mod-specific Python code that gets pulled in). Engine Initialization Call The BF2 engine calls the bf2.init_module() method: This method imports the stats modules. The reason for this separation (instead of putting everything in the __init__ module) is unclear. Configuration File Processing The BF2 engine processes the configuration file located at Battlefield 2 Server/mods/bf2/settings/ServerSettings.con . By default, this file contains the directive: sv.adminScript \"default\" . This directive causes the default module in the Battlefield 2 Server/admin directory to be imported. This module primarily handles the RCon interface but includes an init() function that, when called, imports the admin.standard_admin package. This package handles features such as team autobalancing and team-kill punishment. (See the Admin Module for more details.) Event Registration During Startup Throughout the startup process, as packages and modules are imported into the embedded Python interpreter, they register themselves to receive callbacks when specific events occur in the BF2 engine. Pre-Game Initialization Some modules require initialization before each round begins. These modules: Register to receive callbacks for GameStatusChangedEvents . When the callback indicates that the game status is \u201cPreGame,\u201d the modules execute their initialization code. Event-Driven Execution During Gameplay Once the setup is complete and the game is running, the initialized Python code operates in an event-driven mode: The game engine dispatches execution to Python handlers when registered events occur. For instance, when a player is killed, a PlayerKilled event is fired. Any modules that registered to receive callbacks for this event (e.g., a scoring module) are triggered. End-of-Round Behavior When a game round ends: The game engine does not restart, and neither does the embedded Python interpreter. The bf2 packages are not reimported or reinitialized. Modules needing end-of-round cleanup: Register to receive callbacks for GameStatusChangedEvents . When the game status changes to \u201cEndGame,\u201d these modules perform their cleanup activities. The game engine then returns to the \u201cPreGame\u201d state, and pre-game initialization callback handlers are called to start the cycle again. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#how-battlefield-2-hooks-python","text":"","title":"How Battlefield 2 Hooks Python"},{"location":"#bf2-engine-interaction-with-python","text":"","title":"BF2 Engine Interaction with Python"},{"location":"#overview","text":"This section describes how the BF2 engine interacts with the embedded Python interpreter, detailing the initialization process, module imports, and event handling.","title":"Overview"},{"location":"#python-initialization","text":"When the BF2 engine starts, it initializes its embedded Python interpreter with its sys.path set to include the following directories: Python Standard Library : Located in the file: Battlefield 2 Server/pylib-2.3.4.zip Battlefield 2 Server Python Directory : The directory: Battlefield 2 Server/python Python Directory of the Current Mod : Example: Battlefield 2 Server/mods/bf2/python If the server switches mods, this path will change accordingly. Note that the BF2 game engine does not switch mods automatically between rounds. A mod remains loaded until the server is manually stopped, reconfigured, and restarted. Admin Directory : The directory: Battlefield 2 Server/admin","title":"Python Initialization"},{"location":"#importing-the-bf2-package","text":"The BF2 engine imports the bf2 package, which is located in the Battlefield 2 Server/python directory. During this process: The __init__.py module in the bf2 package is executed. This module imports and instantiates the basic code and objects required for the game, including game.scoringCommon from the active mod\u2019s Python directory (this is the only mod-specific Python code that gets pulled in).","title":"Importing the bf2 Package"},{"location":"#engine-initialization-call","text":"The BF2 engine calls the bf2.init_module() method: This method imports the stats modules. The reason for this separation (instead of putting everything in the __init__ module) is unclear.","title":"Engine Initialization Call"},{"location":"#configuration-file-processing","text":"The BF2 engine processes the configuration file located at Battlefield 2 Server/mods/bf2/settings/ServerSettings.con . By default, this file contains the directive: sv.adminScript \"default\" . This directive causes the default module in the Battlefield 2 Server/admin directory to be imported. This module primarily handles the RCon interface but includes an init() function that, when called, imports the admin.standard_admin package. This package handles features such as team autobalancing and team-kill punishment. (See the Admin Module for more details.)","title":"Configuration File Processing"},{"location":"#event-registration-during-startup","text":"Throughout the startup process, as packages and modules are imported into the embedded Python interpreter, they register themselves to receive callbacks when specific events occur in the BF2 engine.","title":"Event Registration During Startup"},{"location":"#pre-game-initialization","text":"Some modules require initialization before each round begins. These modules: Register to receive callbacks for GameStatusChangedEvents . When the callback indicates that the game status is \u201cPreGame,\u201d the modules execute their initialization code.","title":"Pre-Game Initialization"},{"location":"#event-driven-execution-during-gameplay","text":"Once the setup is complete and the game is running, the initialized Python code operates in an event-driven mode: The game engine dispatches execution to Python handlers when registered events occur. For instance, when a player is killed, a PlayerKilled event is fired. Any modules that registered to receive callbacks for this event (e.g., a scoring module) are triggered.","title":"Event-Driven Execution During Gameplay"},{"location":"#end-of-round-behavior","text":"When a game round ends: The game engine does not restart, and neither does the embedded Python interpreter. The bf2 packages are not reimported or reinitialized. Modules needing end-of-round cleanup: Register to receive callbacks for GameStatusChangedEvents . When the game status changes to \u201cEndGame,\u201d these modules perform their cleanup activities. The game engine then returns to the \u201cPreGame\u201d state, and pre-game initialization callback handlers are called to start the cycle again.","title":"End-of-Round Behavior"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Issues/","text":"Common Issues RendDX9 Error Intel Core PCs or Laptops with a Discrete GPU Navigate Windows Settings \u2023 Graphics Settings Switch prbf2.exe to run on the Discrete GPU PCs or Laptops with no Discrete GPU Update your Intel Xe/ARC Graphics driver. Download Link Warning Issue prevalent on the following: - Intel Core 11th gen and newer - Intel N100 and other N-series - Pentium G7xxx series - Intel ARC Alchemist dGPUs memory.dll Crashes After Play Sessions Happens due to some unknown differences in the way GPU drivers allocate memory, hence why some players might not encounter this error at all. Experimental Fix Use DXVK and enable the config d3d9.deviceLossOnFocusLoss = True . DXVK has a built-in mapped memory, making longer sessions less prone to crashes, but there are still some bugs with DXVK; hence why this is marked as experimental. DXVK GitHub Cannot Hear Anything Disable positional audio inside Mumble\u2019s settings Might work, might not Plug your headphone via the included USB cable Buy a backup wired audio for PR purposes I personally recommend cheap Chinese in-ear monitors for PR. Performance Slowly Degrades Overtime Your PC might need a thorough cleaning and a repaste. Set a more aggressive fan curve to keep CPU turbo clocks high. Low Performance on Ryzen CPUs Enable CPPC and CPPC-preferred cores. Enable CPB (Core Performance Boost) and PBO. BIOS\u2019 advanced menu \u2023 AMD CBS \u2023 Zen/CPU common options menu Enable the following: L1 & L2 Cache Hardware Prefetcher Streaming Stores Control OPcache Control Launched Into an Infinite Black Screen Make sure that there\u2019s no 3rd party antivirus that\u2019s blocking PR. Launch PR with an offline profile; if it works then something is wrong with your network, try a VPN or consult your ISP. Stuck on \u201cJoining Server\u201d Stems from multiple possible issues: - Network issue on player\u2019s end - Switch to wired ethernet - Try a VPN - Complain to your ISP PR is placed on an external drive that\u2019s not formatted in NTFS Reformat your drive to NTFS or place it back to your internal drive. Persistent Skipping/Stuttering Possible Solutions: - Switch to wired ethernet. - Switch to a newer WiFi protocol that has a higher frequency. - Make sure your router and PC/laptop supports it! If you can\u2019t do either of those: - Make sure that your WiFi is at least on a less-crowded channel. - Increase your transmit power.","title":"Common Issues"},{"location":"Issues/#common-issues","text":"","title":"Common Issues"},{"location":"Issues/#renddx9-error","text":"","title":"RendDX9 Error"},{"location":"Issues/#intel-core","text":"PCs or Laptops with a Discrete GPU Navigate Windows Settings \u2023 Graphics Settings Switch prbf2.exe to run on the Discrete GPU PCs or Laptops with no Discrete GPU Update your Intel Xe/ARC Graphics driver. Download Link","title":"Intel Core"},{"location":"Issues/#warning","text":"Issue prevalent on the following: - Intel Core 11th gen and newer - Intel N100 and other N-series - Pentium G7xxx series - Intel ARC Alchemist dGPUs","title":"Warning"},{"location":"Issues/#memorydll-crashes-after-play-sessions","text":"Happens due to some unknown differences in the way GPU drivers allocate memory, hence why some players might not encounter this error at all.","title":"memory.dll Crashes After Play Sessions"},{"location":"Issues/#experimental-fix","text":"Use DXVK and enable the config d3d9.deviceLossOnFocusLoss = True . DXVK has a built-in mapped memory, making longer sessions less prone to crashes, but there are still some bugs with DXVK; hence why this is marked as experimental. DXVK GitHub","title":"Experimental Fix"},{"location":"Issues/#cannot-hear-anything","text":"Disable positional audio inside Mumble\u2019s settings Might work, might not Plug your headphone via the included USB cable Buy a backup wired audio for PR purposes I personally recommend cheap Chinese in-ear monitors for PR.","title":"Cannot Hear Anything"},{"location":"Issues/#performance-slowly-degrades-overtime","text":"Your PC might need a thorough cleaning and a repaste. Set a more aggressive fan curve to keep CPU turbo clocks high.","title":"Performance Slowly Degrades Overtime"},{"location":"Issues/#low-performance-on-ryzen-cpus","text":"Enable CPPC and CPPC-preferred cores. Enable CPB (Core Performance Boost) and PBO. BIOS\u2019 advanced menu \u2023 AMD CBS \u2023 Zen/CPU common options menu Enable the following: L1 & L2 Cache Hardware Prefetcher Streaming Stores Control OPcache Control","title":"Low Performance on Ryzen CPUs"},{"location":"Issues/#launched-into-an-infinite-black-screen","text":"Make sure that there\u2019s no 3rd party antivirus that\u2019s blocking PR. Launch PR with an offline profile; if it works then something is wrong with your network, try a VPN or consult your ISP.","title":"Launched Into an Infinite Black Screen"},{"location":"Issues/#stuck-on-joining-server","text":"Stems from multiple possible issues: - Network issue on player\u2019s end - Switch to wired ethernet - Try a VPN - Complain to your ISP PR is placed on an external drive that\u2019s not formatted in NTFS Reformat your drive to NTFS or place it back to your internal drive.","title":"Stuck on \u201cJoining Server\u201d"},{"location":"Issues/#persistent-skippingstuttering","text":"Possible Solutions: - Switch to wired ethernet. - Switch to a newer WiFi protocol that has a higher frequency. - Make sure your router and PC/laptop supports it! If you can\u2019t do either of those: - Make sure that your WiFi is at least on a less-crowded channel. - Increase your transmit power.","title":"Persistent Skipping/Stuttering"},{"location":"bf2/","text":"Game Status Player class bf2.PlayerManager.Player An object of this class is created for each player in the game. When they are initialized, Player objects automatically instantiate a PlayerScore object and assign it to their score attribute. You must import bf2.PlayerManager if you wish to create objects of this class; normally, however, you will just access methods and attributes of already existing Player objects that are returned to you by other calls, which requires no special import statement. Instance creation x = bf2.PlayerManager.Player(index) index playerID for this player. score Current score for this player. isValid() isRemote() isAIPlayer() isAlive() isManDown() isConnected() getProfileId() isFlagHolder() getTeam() setTeam(t) getPing() Returns: The player\u2019s ping (network transit time from player to server and back) in milliseconds getSuicide() Returns: 1 if the player suicided (resets once the player spawns) setSuicide(t) getTimeToSpawn() Returns: The number of seconds until they are allowed to spawn Returns: 0 when a player is spawned in; when a player is waiting to spawn setTimeToSpawn(t) Appears to generate an exception if used on a player that is already spawned in; if used on a player that that is waiting to spawn it changes the time until they are allowed to spawn. getSquadId() Squads for each team are independently numbered beginning at 1 and increasing thereafter. Players not on a squad, including team commanders, are assigned to squad 0. Returns: The player\u2019s squad ID isSquadLeader() Returns: 1 if player is a squad leader isCommander() Returns: 1 if player is currently the commander getName() Returns: Player\u2019s name setName(name) Sets a player\u2019s name (at least, it changes what getName() returns), but the change doesn\u2019t show up in-game\u2013everything in the game still shows the player\u2019s old name. It is working, but only sees that player who connected after the name change. getSpawnGroup() setSpawnGroup(t) getKit() Returns: The current player\u2019s kit object getVehicle() Returns: The current player\u2019s vehicle object Returns: The player\u2019s soldier object if the player is not in a vehicle at the time getDefaultVehicle() Returns: The player\u2019s soldier object, no matter what vehicle they are in getPrimaryWeapon() Returns: The weapon object for the player\u2019s currently selected weapon getAddress() Returns: The player\u2019s IP address setIsInsideCP(val) getIsInsideCP() Player Manager class bf2.PlayerManager This class is a wrapper around some player management functions in the BF2 engine, and also adds some simple calculations and logic to those functions. During its initialization the bf2 class instantiates this class as the singleton object bf2.playerManager. You must import bf2 to access the methods and attributes of this object. getNumberOfPlayers() getCommander(team) getPlayers() getPlayerByIndex(index) getNextPlayer(index) getNumberOfPlayersInTeam(team) getNumberOfAlivePlayersInTeam(team) enableScoreEvents() Enables PlayerScore events disableScoreEvents() Disables PlayerScore events Timer class bf2.Timer (Not available in PR, use the realitytimer below.) Objects in this class are timers that can cause timer events to be generated when a fixed amount of time has elapsed. bf2.Timer(timerEventHandler, delta, alwaysTrigger, data) Note that even though data is optional when establishing a timer, the timerEventHandler must specify it as a parameter, or the handler won\u2019t work. You must import bf2.Timer to create timer objects. Parameters: timerEventHandler \u2013 Handler to be called when delta seconds have elapsed since the creation of the timer. alwaysTrigger \u2013 Should be 1 (not sure what the alternative is) data \u2013 Optional item (typically a tuple) that will be passed to timerEventHandler. destroy() Destroys the associated game engine timer (but not the Python instance.) getTime() Returns: The wall time at which this timer will fire setTime(time) Changes the wall time at which this timer will fire. setRecurring(interval) Specifies this this timer should fire repeatedly, every interval seconds. onTrigger() For internal use only; calls timerEventHandler. class realitytimer.py Project Reality timer (realitytimer.py) expands the default interface with the following: Exception catching with a debug message when an exception is not caught in the handler No need to worry about bad code crashing the server. Internal check to make sure timers don\u2019t fire after bf2.Timer.destroy() was called Can happen when bf2.Timer.destroy() is called on the same tick fireOnce(targetFunc, delay, data=None) Class that can fire an event once after delay and then destroy itself. No need to store reference. fireNextTick(targetFunc, data=None) Class that will fire the event at the next game tick and then destroy itself. No need to store reference Game Status class bf2.GameStatus Playing EndGame PreGame Paused RestartServer NotConnected Just used as a container for the constant values returned by callbacks from the GameStatusChanged event Game Logic class bf2.GameLogic.GameLogic methods : getModDir() getMapName() getWorldSize() getTeamName(team) isAIGame() sendClientCommand(playerId, command, args) sendGameEvent(playerObject, event, data) sendMedalEvent(playerObject, type, value) sendRankEvent(playerObject, rank, score) sendHudEvent(playerObject, event, data) sendServerMessage(playerId, message) getTicketState(team) setTicketState(team, value) getTickets(team) setTickets(team, value) getDefaultTickets(team) getTicketChangePerSecond(team) setTicketChangePerSecond(team, value) getTicketLimit(team, id) setTicketLimit(team, id, value) getDefaultTicketLossPerMin(team) getDefaultTicketLossAtEndPerMin() getWinner() getVictoryType() setHealPointLimit(value) setRepairPointLimit(value) setGiveAmmoPointLimit(value) setTeamDamagePointLimit(value) setTeamVehicleDamagePointLimit(value) A wrapper around lots of BF2 engine stuff accessible through host, apparently to make it more Pythonic. During its initialization the bf2 class instantiates this class as the singleton object bf2.gameLogic. You must import bf2 to access the methods and attributes of this object. Server Settings Another wrapper around more BF2 engine stuff that\u2019s accessible through host; this class makes it accessing these things cleaner and more Pythonic. During its initialization the bf2 class instantiates this class as the singleton object bf2.serverSettings. class bf2.GameLogic.ServerSettings You must import bf2 to access the methods and attributes of this object. getTicketRatio() getTeamRatioPercent() getMaxPlayers() getGameMode() getMapName() getTimeLimit() getScoreLimit() getAutoBalanceTeam() getTKPunishEnabled() getTKNumPunishToKick() getTKPunishByDefault() getUseGlobalRank() getUseGlobalUnlocks() You cannot find out server name, port and other similar information this way. Instead, use f.e. host.rcon_invoke('sv.serverName') to get the server name. ObjectManager class bf2.ObjectManager.ObjectManager getObjectsOfType(object type) getObjectsOfTemplate(object template) During its initialization the bf2 class instantiates this class as the singleton object bf2.objectManager. This object can be used by Python to get access to internal game engine C++ objects. A list of the available object types can be found here. You must import bf2 to access the methods and attributes of this object. Player Manager class bf2.PlayerManager.PlayerScore Objects of this class maintain a long list of player score attributes. They are used inside of objects of the Player class; for any Player object x, x.score is an object of class PlayerScore. You will not normally create objects of this class; they are created automatically as part of the Player class when Player objects are created. No special imports are necessary to access methods and attributes of these objects. There is also a separate player.stats object, which tracks different information. You can use the following code fragment to see all of the variables in the player.stats object. for s in vars(player.stats): print str(s) reset() Resets all score attributes stored within the object itself. index heals ammos repairs damageAssists passengerAssists driverAssists targetAssists driverSpecials revives teamDamages teamVehicleDamages cpCaptures cpDefends cpAssists suicides cpNeutralizes cpNeutralizeAssists rplScore This attribute may not be in all versions of BF2 skillScore cmdScore Class attributes stored in the BF2 engine deaths, kills, TKs,score, skillScore, rplScore, cmdScore, fracScore, rank, firstPlace, secondPlace, thirdPlace, bulletsFired Gives a tuple, each element of which is a 2-tuple consisting of the name of a weapon the player has fired, and the number of shots they fired from that weapon. As the player uses more weapons, more of the 2-tuples are added to the list. An example tuple returned: ((\"uspi-m16\", 30), (\"knife\", 3)) Before the first weapon is fired, this may be None or an empty tuple. The first weapon fired will not always be the first 2-tuple on the list returned. bulletsGivingDamage Same as above, but only with bullets giving damage bulletsFiredAndClear The \u201cAndClear\u201d resets the engine counter. polling this will only give new bullets. However having more than one module polling them is not a good idea. bulletsGivingDamageAndClear dkRatio Trigger Manager class bf2.TriggerManager.TriggerManager This class is a wraper around some player management functions in the BF2 engine. During its initialization the bf2 class instantiates this class as the singleton object bf2.triggerManager. This object is used to manage \u201ctriggers\u201d, which are events that are fired when a PCO enters a defined spherical or hemispherical volume surrounding an object. You must import bf2 to access the methods and attributes of this object. createRadiusTrigger(object, callback, objName, radius, data=None) Creates a trigger that causes callback to be called if a player enters a spherical region of radius radius centered on object, passing data as an argument. createHemiSphericalTrigger(object, callback, objName, radius, data=None) Same as createRadiusTrigger(), except that instead of a spherical trigger region, the trigger region is a flat circle lying along the ground (yes, it\u2019s badly named). destroyAllTriggers() Destroys all registered triggers. destroy(trig_id) Destroys a specific trigger. getObjects(trig_id) Returns: A tuple containing all objects currently within the specified trigger region constants class bf2.stats.constants This module appears intended to be imported with something like\u2026 from bf2.stats.constants import * so that everything in it is loaded into the local namespace, rather than being a part of any object. The module includes a lot of constants and dictionaries, as well as some utility functions. getVehicleType(templateName) getWeaponType(templateName) getKitType(templateName) getArmy(templateName) getMapId(mapName) getGameModeId(gameMode) getRootParent(physicalObject) Traverses the containment for physicalObject all the way to the top","title":"bf2"},{"location":"bf2/#game-status","text":"","title":"Game Status"},{"location":"bf2/#player","text":"class bf2.PlayerManager.Player An object of this class is created for each player in the game. When they are initialized, Player objects automatically instantiate a PlayerScore object and assign it to their score attribute. You must import bf2.PlayerManager if you wish to create objects of this class; normally, however, you will just access methods and attributes of already existing Player objects that are returned to you by other calls, which requires no special import statement. Instance creation x = bf2.PlayerManager.Player(index) index playerID for this player. score Current score for this player. isValid() isRemote() isAIPlayer() isAlive() isManDown() isConnected() getProfileId() isFlagHolder() getTeam() setTeam(t) getPing() Returns: The player\u2019s ping (network transit time from player to server and back) in milliseconds getSuicide() Returns: 1 if the player suicided (resets once the player spawns) setSuicide(t) getTimeToSpawn() Returns: The number of seconds until they are allowed to spawn Returns: 0 when a player is spawned in; when a player is waiting to spawn setTimeToSpawn(t) Appears to generate an exception if used on a player that is already spawned in; if used on a player that that is waiting to spawn it changes the time until they are allowed to spawn. getSquadId() Squads for each team are independently numbered beginning at 1 and increasing thereafter. Players not on a squad, including team commanders, are assigned to squad 0. Returns: The player\u2019s squad ID isSquadLeader() Returns: 1 if player is a squad leader isCommander() Returns: 1 if player is currently the commander getName() Returns: Player\u2019s name setName(name) Sets a player\u2019s name (at least, it changes what getName() returns), but the change doesn\u2019t show up in-game\u2013everything in the game still shows the player\u2019s old name. It is working, but only sees that player who connected after the name change. getSpawnGroup() setSpawnGroup(t) getKit() Returns: The current player\u2019s kit object getVehicle() Returns: The current player\u2019s vehicle object Returns: The player\u2019s soldier object if the player is not in a vehicle at the time getDefaultVehicle() Returns: The player\u2019s soldier object, no matter what vehicle they are in getPrimaryWeapon() Returns: The weapon object for the player\u2019s currently selected weapon getAddress() Returns: The player\u2019s IP address setIsInsideCP(val) getIsInsideCP()","title":"Player"},{"location":"bf2/#player-manager","text":"class bf2.PlayerManager This class is a wrapper around some player management functions in the BF2 engine, and also adds some simple calculations and logic to those functions. During its initialization the bf2 class instantiates this class as the singleton object bf2.playerManager. You must import bf2 to access the methods and attributes of this object. getNumberOfPlayers() getCommander(team) getPlayers() getPlayerByIndex(index) getNextPlayer(index) getNumberOfPlayersInTeam(team) getNumberOfAlivePlayersInTeam(team) enableScoreEvents() Enables PlayerScore events disableScoreEvents() Disables PlayerScore events","title":"Player Manager"},{"location":"bf2/#timer","text":"class bf2.Timer (Not available in PR, use the realitytimer below.) Objects in this class are timers that can cause timer events to be generated when a fixed amount of time has elapsed. bf2.Timer(timerEventHandler, delta, alwaysTrigger, data) Note that even though data is optional when establishing a timer, the timerEventHandler must specify it as a parameter, or the handler won\u2019t work. You must import bf2.Timer to create timer objects. Parameters: timerEventHandler \u2013 Handler to be called when delta seconds have elapsed since the creation of the timer. alwaysTrigger \u2013 Should be 1 (not sure what the alternative is) data \u2013 Optional item (typically a tuple) that will be passed to timerEventHandler. destroy() Destroys the associated game engine timer (but not the Python instance.) getTime() Returns: The wall time at which this timer will fire setTime(time) Changes the wall time at which this timer will fire. setRecurring(interval) Specifies this this timer should fire repeatedly, every interval seconds. onTrigger() For internal use only; calls timerEventHandler. class realitytimer.py Project Reality timer (realitytimer.py) expands the default interface with the following: Exception catching with a debug message when an exception is not caught in the handler No need to worry about bad code crashing the server. Internal check to make sure timers don\u2019t fire after bf2.Timer.destroy() was called Can happen when bf2.Timer.destroy() is called on the same tick fireOnce(targetFunc, delay, data=None) Class that can fire an event once after delay and then destroy itself. No need to store reference. fireNextTick(targetFunc, data=None) Class that will fire the event at the next game tick and then destroy itself. No need to store reference","title":"Timer"},{"location":"bf2/#game-status_1","text":"class bf2.GameStatus Playing EndGame PreGame Paused RestartServer NotConnected Just used as a container for the constant values returned by callbacks from the GameStatusChanged event","title":"Game Status"},{"location":"bf2/#game-logic","text":"class bf2.GameLogic.GameLogic methods : getModDir() getMapName() getWorldSize() getTeamName(team) isAIGame() sendClientCommand(playerId, command, args) sendGameEvent(playerObject, event, data) sendMedalEvent(playerObject, type, value) sendRankEvent(playerObject, rank, score) sendHudEvent(playerObject, event, data) sendServerMessage(playerId, message) getTicketState(team) setTicketState(team, value) getTickets(team) setTickets(team, value) getDefaultTickets(team) getTicketChangePerSecond(team) setTicketChangePerSecond(team, value) getTicketLimit(team, id) setTicketLimit(team, id, value) getDefaultTicketLossPerMin(team) getDefaultTicketLossAtEndPerMin() getWinner() getVictoryType() setHealPointLimit(value) setRepairPointLimit(value) setGiveAmmoPointLimit(value) setTeamDamagePointLimit(value) setTeamVehicleDamagePointLimit(value) A wrapper around lots of BF2 engine stuff accessible through host, apparently to make it more Pythonic. During its initialization the bf2 class instantiates this class as the singleton object bf2.gameLogic. You must import bf2 to access the methods and attributes of this object.","title":"Game Logic"},{"location":"bf2/#server-settings","text":"Another wrapper around more BF2 engine stuff that\u2019s accessible through host; this class makes it accessing these things cleaner and more Pythonic. During its initialization the bf2 class instantiates this class as the singleton object bf2.serverSettings. class bf2.GameLogic.ServerSettings You must import bf2 to access the methods and attributes of this object. getTicketRatio() getTeamRatioPercent() getMaxPlayers() getGameMode() getMapName() getTimeLimit() getScoreLimit() getAutoBalanceTeam() getTKPunishEnabled() getTKNumPunishToKick() getTKPunishByDefault() getUseGlobalRank() getUseGlobalUnlocks() You cannot find out server name, port and other similar information this way. Instead, use f.e. host.rcon_invoke('sv.serverName') to get the server name.","title":"Server Settings"},{"location":"bf2/#objectmanager","text":"class bf2.ObjectManager.ObjectManager getObjectsOfType(object type) getObjectsOfTemplate(object template) During its initialization the bf2 class instantiates this class as the singleton object bf2.objectManager. This object can be used by Python to get access to internal game engine C++ objects. A list of the available object types can be found here. You must import bf2 to access the methods and attributes of this object.","title":"ObjectManager"},{"location":"bf2/#player-manager_1","text":"class bf2.PlayerManager.PlayerScore Objects of this class maintain a long list of player score attributes. They are used inside of objects of the Player class; for any Player object x, x.score is an object of class PlayerScore. You will not normally create objects of this class; they are created automatically as part of the Player class when Player objects are created. No special imports are necessary to access methods and attributes of these objects. There is also a separate player.stats object, which tracks different information. You can use the following code fragment to see all of the variables in the player.stats object. for s in vars(player.stats): print str(s) reset() Resets all score attributes stored within the object itself. index heals ammos repairs damageAssists passengerAssists driverAssists targetAssists driverSpecials revives teamDamages teamVehicleDamages cpCaptures cpDefends cpAssists suicides cpNeutralizes cpNeutralizeAssists rplScore This attribute may not be in all versions of BF2 skillScore cmdScore Class attributes stored in the BF2 engine deaths, kills, TKs,score, skillScore, rplScore, cmdScore, fracScore, rank, firstPlace, secondPlace, thirdPlace, bulletsFired Gives a tuple, each element of which is a 2-tuple consisting of the name of a weapon the player has fired, and the number of shots they fired from that weapon. As the player uses more weapons, more of the 2-tuples are added to the list. An example tuple returned: ((\"uspi-m16\", 30), (\"knife\", 3)) Before the first weapon is fired, this may be None or an empty tuple. The first weapon fired will not always be the first 2-tuple on the list returned. bulletsGivingDamage Same as above, but only with bullets giving damage bulletsFiredAndClear The \u201cAndClear\u201d resets the engine counter. polling this will only give new bullets. However having more than one module polling them is not a good idea. bulletsGivingDamageAndClear dkRatio","title":"Player Manager"},{"location":"bf2/#trigger-manager","text":"class bf2.TriggerManager.TriggerManager This class is a wraper around some player management functions in the BF2 engine. During its initialization the bf2 class instantiates this class as the singleton object bf2.triggerManager. This object is used to manage \u201ctriggers\u201d, which are events that are fired when a PCO enters a defined spherical or hemispherical volume surrounding an object. You must import bf2 to access the methods and attributes of this object. createRadiusTrigger(object, callback, objName, radius, data=None) Creates a trigger that causes callback to be called if a player enters a spherical region of radius radius centered on object, passing data as an argument. createHemiSphericalTrigger(object, callback, objName, radius, data=None) Same as createRadiusTrigger(), except that instead of a spherical trigger region, the trigger region is a flat circle lying along the ground (yes, it\u2019s badly named). destroyAllTriggers() Destroys all registered triggers. destroy(trig_id) Destroys a specific trigger. getObjects(trig_id) Returns: A tuple containing all objects currently within the specified trigger region","title":"Trigger Manager"},{"location":"bf2/#constants","text":"class bf2.stats.constants This module appears intended to be imported with something like\u2026 from bf2.stats.constants import * so that everything in it is loaded into the local namespace, rather than being a part of any object. The module includes a lot of constants and dictionaries, as well as some utility functions. getVehicleType(templateName) getWeaponType(templateName) getKitType(templateName) getArmy(templateName) getMapId(mapName) getGameModeId(gameMode) getRootParent(physicalObject) Traverses the containment for physicalObject all the way to the top","title":"constants"},{"location":"cf/","text":"Warning You are not allowed to use anything from another BF2 mod, including other BSS mods without full permission of the use of that asset. To get permission, you will need to go though us (Project Reality Lead Developers) to gain permission. To do this, please read the relevent Stickied post in this forum. Any assets that you require from other mods though us you are not allowed to redistribute or anything like that to any other mod team or w/e. If any other community mods want to use an asset that has been required via another community faction team, they must go through the same process. If we find that any assets have been stolen from any other mod, be it BF2 or any other game, we will take serious action against you along with that team and inform them of exactly what you have done and then we will take it from there, but be warned, you do not want to get onto the bad side of us or any other BF2 mod, we have full copyright on these assets we have made, as you do on the assets you have made ============================= You are not permitted to release your community mod without permission from us, if you do we will take action against you. It is not hard to get a \u201cyes\u201d from us, the only thing that will make us say \u201cno\u201d is if there is some major bugs that we think need to be cleaned up before release first, or it would take the mod in a direction we don\u2019t want it to, thou if we thought it would we would probably say that when you submit the design plan. It is also in your best interest that we release it since that means full front page news cover on our, and every other BF2 community site, ingame MOTD (Message of the Day) promotion and us hosting the files on our servers etc. How do I start making a Community Faction for PR? Assemble a Team If you want to develop a Community Faction, you will need to assemble a team, unless you think you can do the entire mod on your own which is really not feasible unless for a small mini-mod based on PR, depending on how small the mini-mod is and the skill of the developer. The normal community faction will need a team because it would be a major addition of a team to PR, etc. Best way to go about recruiting a team is normally to go posting a single topic in the community modding forums about what you plan on doing, and on other forums you think you may be able to recruit from. Remember, \u201ctesters\u201d for your mod don\u2019t count, in fact, you can not recruit any testers for your mod as will be explained later on. Only DEVs like modellers, skinners, mappers, coders etc. Design a Plan Once you have a team, you will then need to assemble a design plan of what you want to do. If your making a new faction, your design plan should include all the vehicles, weapons, and general new content you will be adding such as maps, statics or w/e. The more complete your design plan is, the more seriously we will take you and the more likely your community mod will succeed. Submit Your Design Plan Once you have completed your design plan, you will need to submit it to a \u201cRed Tag\u201d Developer via a Private Message on these forums with info about the basics you want to do, a list of your current team members, examples of any work you may have done so far on it, models, textures etc and of course, your design plan. Again, the more complete your submissions are the more seriously we will take you. Modding is no easy task and it takes a huge amount of time and effort and we do not want to be wasting our team on a community mod that don\u2019t look like they have their sh*t together. Once you have submitted the above, we will assess your mod and providing everything checks out and we are happy with your general concept, design plan etc we will approve your mod and make your own sub forum inside the community modding forums for you to work in. The Leader of the Community mod will also get access to the R-COM (Faction) forums so he can be in direct contact with CONs & DEVs. What assets are we allowed to use? To put it simply, anything that is inside the Project Reality mod or vBF2 (not xpacks etc) already, you\u2019re allowed to use, even if its not in use currently in the mod though if it\u2019s not in use, that may be because its buggy or still not finished. For the assets in the mod, you are allowed to reskin them and add \u201cchild\u201d objects on (models attach by code, like a missile rack or w/e) thou you are not allowed to modify the model itself without our full permission. This also goes for vBF2 models and other mod\u2019s models. Final Information We are here to help you, as much as you are here to help us by trying to add something new to PR so providing you are willing to work with us in a professional manner, we will do the same. Cheers, The Project Reality Team. Made by Rhino","title":"Community Factions"},{"location":"cf/#_1","text":"","title":""},{"location":"cf/#warning","text":"You are not allowed to use anything from another BF2 mod, including other BSS mods without full permission of the use of that asset. To get permission, you will need to go though us (Project Reality Lead Developers) to gain permission. To do this, please read the relevent Stickied post in this forum. Any assets that you require from other mods though us you are not allowed to redistribute or anything like that to any other mod team or w/e. If any other community mods want to use an asset that has been required via another community faction team, they must go through the same process. If we find that any assets have been stolen from any other mod, be it BF2 or any other game, we will take serious action against you along with that team and inform them of exactly what you have done and then we will take it from there, but be warned, you do not want to get onto the bad side of us or any other BF2 mod, we have full copyright on these assets we have made, as you do on the assets you have made ============================= You are not permitted to release your community mod without permission from us, if you do we will take action against you. It is not hard to get a \u201cyes\u201d from us, the only thing that will make us say \u201cno\u201d is if there is some major bugs that we think need to be cleaned up before release first, or it would take the mod in a direction we don\u2019t want it to, thou if we thought it would we would probably say that when you submit the design plan. It is also in your best interest that we release it since that means full front page news cover on our, and every other BF2 community site, ingame MOTD (Message of the Day) promotion and us hosting the files on our servers etc.","title":"Warning"},{"location":"cf/#how-do-i-start-making-a-community-faction-for-pr","text":"","title":"How do I start making a Community Faction for PR?"},{"location":"cf/#assemble-a-team","text":"If you want to develop a Community Faction, you will need to assemble a team, unless you think you can do the entire mod on your own which is really not feasible unless for a small mini-mod based on PR, depending on how small the mini-mod is and the skill of the developer. The normal community faction will need a team because it would be a major addition of a team to PR, etc. Best way to go about recruiting a team is normally to go posting a single topic in the community modding forums about what you plan on doing, and on other forums you think you may be able to recruit from. Remember, \u201ctesters\u201d for your mod don\u2019t count, in fact, you can not recruit any testers for your mod as will be explained later on. Only DEVs like modellers, skinners, mappers, coders etc.","title":"Assemble a Team"},{"location":"cf/#design-a-plan","text":"Once you have a team, you will then need to assemble a design plan of what you want to do. If your making a new faction, your design plan should include all the vehicles, weapons, and general new content you will be adding such as maps, statics or w/e. The more complete your design plan is, the more seriously we will take you and the more likely your community mod will succeed.","title":"Design a Plan"},{"location":"cf/#submit-your-design-plan","text":"Once you have completed your design plan, you will need to submit it to a \u201cRed Tag\u201d Developer via a Private Message on these forums with info about the basics you want to do, a list of your current team members, examples of any work you may have done so far on it, models, textures etc and of course, your design plan. Again, the more complete your submissions are the more seriously we will take you. Modding is no easy task and it takes a huge amount of time and effort and we do not want to be wasting our team on a community mod that don\u2019t look like they have their sh*t together. Once you have submitted the above, we will assess your mod and providing everything checks out and we are happy with your general concept, design plan etc we will approve your mod and make your own sub forum inside the community modding forums for you to work in. The Leader of the Community mod will also get access to the R-COM (Faction) forums so he can be in direct contact with CONs & DEVs.","title":"Submit Your Design Plan"},{"location":"cf/#what-assets-are-we-allowed-to-use","text":"To put it simply, anything that is inside the Project Reality mod or vBF2 (not xpacks etc) already, you\u2019re allowed to use, even if its not in use currently in the mod though if it\u2019s not in use, that may be because its buggy or still not finished. For the assets in the mod, you are allowed to reskin them and add \u201cchild\u201d objects on (models attach by code, like a missile rack or w/e) thou you are not allowed to modify the model itself without our full permission. This also goes for vBF2 models and other mod\u2019s models.","title":"What assets are we allowed to use?"},{"location":"cf/#final-information","text":"We are here to help you, as much as you are here to help us by trying to add something new to PR so providing you are willing to work with us in a professional manner, we will do the same. Cheers, The Project Reality Team. Made by Rhino","title":"Final Information"},{"location":"events/","text":"Events in BF2 Engine Overview The interaction between the BF2 engine and Python programs is largely event-driven. This means that when an event happens in a game, the BF2 engine checks if any Python programs have registered to be notified of that specific event. If they have, the programs are called (this is known as a \"callback\"). You can think of events as \u201chooks\u201d into the game engine where you can attach your own Python code. How Events Work When an event occurs, the BF2 engine searches for any Python programs that have registered for that event. If registered callbacks exist, they are executed when the event happens. Multiple callbacks can be registered for a single event, meaning all registered callbacks will be executed sequentially when the event occurs. Example: PlayerConnect Event For instance, if three different programs have registered for the \u201cPlayerConnect\u201d event, then when a new player connects, all three of those programs will be run. This allows for flexibility and modularity in how the game responds to various events. Registering Events Python programs can register for specific events using the BF2 engine\u2019s event system. By doing this, you can customize and extend the behavior of the game. Benefits : Modular code: Different Python modules can independently handle different aspects of game behavior. Flexibility: Multiple modules can respond to the same event, allowing for complex interactions and features. Summary Events serve as important hooks into the BF2 engine, providing opportunities to extend and customize gameplay through Python callbacks. By understanding and utilizing these events, developers can create modular, responsive, and interactive game elements. Types of Events Standard Events These are events that occur during the normal course of gameplay host.registerHandler('EventName', pythonEventHandler[, parameter]) This registration will typically be done in the init() method of an object, but could be done anywhere in your code. Game Status Events The BF2 engine generates these events when the status of the game changes. You register to receive callbacks for these events host.registerGameStatusHandler(pythonEventHandler) The possible states game status can be in (as enumerated in bf2.GameStatus) are: NotConnected PreGame Playing Paused EndGame RestartServer Game status events are usually used to kick off pre-game initialization or post-game clean-up processing. Trigger Events \u201cTrigger\u201d events activate when a vehicle comes within a specified distance of an object. Triggers are created and registered for by\u201d bf2.triggerManager. createHemiSphericalTrigger(object, triggerEventHandler, objectName, radius[, data]) bf2.triggerManager.createRadiusTrigger(object, triggerEventHandler, objectName, radius[, data]) In standard Battlefield 2, trigger events are used to track scoring for flag captures (triggers activate whenever a player enters or leaves a fixed radius around each control point), as well as effects such as birds (birds are triggered to take flight whenever a player enter their trigger radius). Timer Events impimport game.realitytimer as rtimer rtimer.Timer(timerEventHandler, delta, alwaysTrigger,data) Timer events activate when a certain amount of time has elapsed. In standard Battlefield 2, timer events are used to cause periodic status checks related to scoring, ranking, punishing TKs, etc. See the description of the bf2.Timer class for details. Descriptions of Events\u00b6 EA/DICE have not published a list of events, but here is a list of events that have been discovered so far. host.EventName(handlerParameter1, handlerParameter2, ...) The EventName is the name of the event to register for with host. registerHandler; the parameters are the parameters your handler should receive when called. Parameters: playerObject \u2013 An instance of bf2.PlayerManager.Player playerID \u2013 As players connect to the server they are assigned playerID numbers from \u201c1\u201d up squadID (int) \u2013 Squads for each side are independently numbered beginning at \u201c1\u201d and increasing thereafter. Players not on a squad, including team commanders, are assigned to squad \u201c0\u201d teamID (int) \u2013 0 for US, 1 for China or MEC Player Events Player Connect host.PlayerConnect(playerObject) Fires when a player connects to the game. Player Spawn host.PlayerSpawn(playerObject, soldierObject)\u00b6 Occurs when a player spawns, and associates a playerObject \u201cspirit\u201d with a soldierObject \u201cbody\u201d. Player Change Teams host.PlayerChangeTeams(playerObject, humanHasSpawned) Parameters: humanHasSpawned \u2013 1 if the player the event is firing for is a human (as opposed to an AI). Does not fire due to team change from \u201csetTeam\u201d! Player Chang eWeapon host.PlayerChangeWeapon(playerObject, oldWeaponObject, newWeaponObject)\u00b6 Player has changed which weapon they are holding. Player Changed Squad host.PlayerChangedSquad(playerObject, oldSquadID, newSquadID) SquadID is 0 for players who are not members of any squad (including the team commander). Player Score host.PlayerScore(playerObject, difference)\u00b6 Difference is change to player\u2019s score (positive or negative). Player Heal Point host.PlayerHealPoint(givingPlayerObject, receivingSoldierObject) Occurs whenever a player heals another player; there is no indication of how much health was restored. Player Repair Point host.PlayerRepairPoint(givingPlayerObject, receivingVehicleObject) Occurs whenever a player repairs a vehicle; there is no indication of how much damage was repaired. Player Give Ammo Point host.PlayerGiveAmmoPoint(givingPlayerObject, receivingPhysicalObject) Occurs whenever a player replenishes the ammo in another player or vehicle. There is no indication of how much ammo was replenished. Player Team Damage Point host.PlayerTeamDamagePoint(playerObject, victimSoldierObject)\u00b6 Occurs whenever a player damages another player on their own team. There is no indication of how much damage was done. Player Killed host.PlayerKilled(victimPlayerObject, attackerPlayerObject, weaponObject, assists, victimSoldierObject) This event occurs when a player is \u201ccritically injured\u201d, but still capable of being revived. If any players assisted in the kill, then \u201cassists\u201d will be a tuple of tuples: the top-level tuple will contain one lower-level tuple for each assisting player; the lower-level tuples will each have two elements: a playerObject for one of the assisting players, and a number indicating the type of assist (1=targeting assist, 2=kill damage assist, 3=driver assist). Player Revived host.PlayerRevived(revivedPlayerObject, medicPlayerObject) Player has been revived from a \u201ccritically injured\u201d condition to full health by a medic using \u201cshock paddles\u201d. Players can only be revived in the interval between a PlayerKilled() event and a subsequent PlayerDeath() event. Player Death host.PlayerDeath(playerObject, soldierObject) This event occurs when a player is decisively dead, and cannot be revived; they will only return to the game by respawning. soldierObject is the soldier \u201cbody\u201d (which is now discarded) for the playerObject \u201cspirit\u201d (which will persist through the next spawn). Player Banned host.PlayerBanned(playerObject, time, type)\u00b6 Player Kicked host.PlayerKicked(playerObject) Player has been kicked off the server. Player Disconnect host.PlayerDisconnect(playerObject) Player has disconnected from the server. Vehicle and Kit Events Enter Vehicle host.EnterVehicle(playerObject, vehicleObject[, freeSoldier]) Player represented by playerObject has entered the vehicle represented by vehicleObject. freeSoldier is 1 if the player is a passenger of the vehicle and is able to use weapons/objects of his kit. i.e. seat 4(+) of a black hawk. Exit Vehicle host.ExitVehicle(playerObject, vehicleObject) Player has exited a vehicle. Vehicle Destroyed host.VehicleDestroyed(vehicleObject, attackerObject) vehicleObject has been destroyed by attackerObject. Pickup Kit host.PickupKit(playerObject, kitObject) Player has picked up a kit. This occurs both when a player physically picks up a kit, as well as when a player spawns. Drop Kit ost.DropKit(playerObject, kitObject) Player has dropped a kit; can occur either because a player has died, or because a player has picked up a different kit. Team Events Reset host.Reset(data) TBD Changed Commander host.ChangedCommander(teamID, oldCommanderPlayerObject, newCommanderPlayerObject) Occurs when a team changes commanders; the old or new commander may be \u201cNone\u201d. Changed Squad Leader host.ChangedSquadLeader(squadID, oldLeaderPlayerObject, newLeaderPlayerObject) Occurs when a squad changes squad leaders; the old or new squad leader may be \u201cNone\u201d. Game Events Control Point ChangedOwner host.ControlPointChangedOwner(controlPointObject, attackingTeamID) TBD Time Limit Reached host.TimeLimitReached(value) Event fires when the fixed time limit for a round expires (not sure what \u201cvalue\u201d is) Ticket Limit Reached host.TicketLimitReached(team, limitID) TBD Command Events Console Send Command host.ConsoleSendCommand(command, args) This event is triggered by someone using the pythonHost.sendCommand console command. Unfortunately, this command/event mechanism appears to be disabled in non-ranked servers. (As a workaround, you can achieve a similar effect creating and registering your own custom RCon commands. Remote Command host.RemoteCommand(playerId, cmd) Event fires when a game client gives an RCon (remote console) command. cmd is the command the player gave. This event is used by the admin module to receive and process RCon commands from players; RCon commands from TCP connections are received by the admin module directly, and do not fire this event. Client Command host.ClientCommand(command, issuerPlayerObject, args) This event occurs when a game client issues certain in-game commands. The only such commands identified so far are: command=100 means player wants to punish teammate for teamkill; command=101 means player wants to forgive. In both cases, args=1. This response is generated by the player responding to an on-screen prompt caused by a call to the bf2.gameLogic.sendClientCommand method. Miscellaneous Events Player Unlocks Response host.PlayerUnlocksResponse(succeeded, player, unlocks) Unlocks are requested and received asynchronously. This event is triggered when the response for player (which is an object of type Player) are received. If the ranking server did not successfully find the player in question, succeeded is set to false, else true. unlocks is a list of kit ids, which are 11, 22, 33 .. 77. Player Awards Response host.PlayerAwardsResponse() TBD Chat Message host.ChatMessage(playerId, text, channel, flags) channel is Squad, Team, Global, ServerTeamMessage or ServerMessage. Text is the text of the message sent, prefixed by HUD_TEXT_CHAT_TEAM or HUD_TEXT_CHAT_SQUAD if the message is sent to the Team or Squad channel; there is no prefix if it is sent to the Global channel. playerId is -1 for all server messages. If the player sending the message is dead, their message is also prefixed by HUD_CHAT_DEADPREFIX. (Strings such as HUD_TEXT_CHAT_TEAM, HUD_CHAT_DEADPREFIX, and so on, are used as keys by the game engine to match and replace with localized text.) Player StatsResponse host.PlayerStatsResponse(succeeded, player, response) TBD Update host.Update(data) TBD Non-Standard Events Game Status Changed Event host.GameStatusChangedEvent(status) This type of event is registered for with host.registerGameStatusHandler(). status is an integer status code enumerated by bf2.GameStatus. Trigger Event host.TriggerEvent(triggerID, object, vehicle, enter, userData) This type of event is registered for with bf2.triggerManager.createHemiSphericalTrigger or bf2.triggerManager.createRadiusTrigger; trigger triggerID is activated when vehicle comes within the preset radius of object. Timer Event host.TimerEvent(data) This type of event fires when a timer established with bf2.Timer expires. \u201cdata\u201d is an optional piece of information (of any type) that can be set when the timer is established. Mysterious Events read me These strings were found in the server executable, and appear to be internal game engine events. They seem to not be accessible from Python, except in a few cases, where there is a correspondence between these \u201cevents\u201d and Python events (e.g. \u201cBeginRoundEvent\u201d may be the same as \u201cBeginRound\u201d). For more information, see BF2 Internals. Remove Spawn Group Event host.RemoveSpawnGroupEvent() Create Spawn Group Event host.CreateSpawnGroupEvent() Content Check Event host.ContentCheckEvent() UAV Event host.UAVEvent() Missile Init Event host.MissileInitEvent() Unlock Event host.UnlockEvent() Medal Event host.MedalEvent() Toggle Free Camera Event host.ToggleFreeCameraEvent() Voip Session Event host.VoipSessionEvent() Request Event host.RequestEvent() Python Command Event host.PythonCommandEvent() End Of Round Event host.EndOfRoundEvent() Begin Round Event host.BeginRoundEvent() Target Direction Event host.TargetDirectionEvent() Vote Event host.VoteEvent() Voip Player Mute Event host.VoipPlayerMuteEvent() Supply Drop Event host.SupplyDropEvent() Commander Cam Event host.CommanderCamEvent() Voip On/Off Event host.VoipOnOffEvent() Ambient Effect Area Event host.AmbientEffectAreaEvent() Sticky Projectile Event host.StickyProjectileEvent() Artillery Event host.ArtilleryEvent() Spotted Event host.SpottedEvent() Set Squad Leader Event host.SetSquadLeaderEvent() Set Accept Order Event host.SetAcceptOrderEvent() Kick/Ban Event host.KickBanEvent() Rank Event host.RankEvent() Invite Event host.InviteEvent() Issue Squad Order Event host.IssueSquadOrderEvent() Set Private Squad Event host.SetPrivateSquadEvent() Change Squad Name Event host.ChangeSquadNameEvent() Killed By Event host.KilledByEvent() Radio Message Event host.RadioMessageEvent() Commander Event host.CommanderEvent() Leave Squad Event host.LeaveSquadEvent() Join Squad Event host.JoinSquadEvent() String Block Event host.StringBlockEvent() Handle Drop Event host.HandleDropEvent() Handle Pickup Event host.HandlePickupEvent() Change Player Name Event host.ChangePlayerNameEvent() Post Remote Event host.PostRemoteEvent() Exit Vehicle Event host.ExitVehicleEvent() Enter Vehicle Event host.EnterVehicleEvent() Destroy Player Event host.DestroyPlayerEvent() Destroy Object Event host.DestroyObjectEvent() Create Kit Event host.CreateKitEvent() Create Object Event host.CreateObjectEvent() Create Player Event host.CreatePlayerEvent() Data Block Event host.DataBlockEvent() Connection Type Event host.ConnectionTypeEvent() Challenge Response Event host.ChallengeResponseEvent() Challenge Event host.ChallengeEvent()","title":"Events"},{"location":"events/#events-in-bf2-engine","text":"","title":"Events in BF2 Engine"},{"location":"events/#overview","text":"The interaction between the BF2 engine and Python programs is largely event-driven. This means that when an event happens in a game, the BF2 engine checks if any Python programs have registered to be notified of that specific event. If they have, the programs are called (this is known as a \"callback\"). You can think of events as \u201chooks\u201d into the game engine where you can attach your own Python code.","title":"Overview"},{"location":"events/#how-events-work","text":"When an event occurs, the BF2 engine searches for any Python programs that have registered for that event. If registered callbacks exist, they are executed when the event happens. Multiple callbacks can be registered for a single event, meaning all registered callbacks will be executed sequentially when the event occurs.","title":"How Events Work"},{"location":"events/#example-playerconnect-event","text":"For instance, if three different programs have registered for the \u201cPlayerConnect\u201d event, then when a new player connects, all three of those programs will be run. This allows for flexibility and modularity in how the game responds to various events.","title":"Example: PlayerConnect Event"},{"location":"events/#registering-events","text":"Python programs can register for specific events using the BF2 engine\u2019s event system. By doing this, you can customize and extend the behavior of the game. Benefits : Modular code: Different Python modules can independently handle different aspects of game behavior. Flexibility: Multiple modules can respond to the same event, allowing for complex interactions and features.","title":"Registering Events"},{"location":"events/#summary","text":"Events serve as important hooks into the BF2 engine, providing opportunities to extend and customize gameplay through Python callbacks. By understanding and utilizing these events, developers can create modular, responsive, and interactive game elements.","title":"Summary"},{"location":"events/#types-of-events","text":"","title":"Types of Events"},{"location":"events/#standard-events","text":"These are events that occur during the normal course of gameplay host.registerHandler('EventName', pythonEventHandler[, parameter]) This registration will typically be done in the init() method of an object, but could be done anywhere in your code.","title":"Standard Events"},{"location":"events/#game-status-events","text":"The BF2 engine generates these events when the status of the game changes. You register to receive callbacks for these events host.registerGameStatusHandler(pythonEventHandler) The possible states game status can be in (as enumerated in bf2.GameStatus) are: NotConnected PreGame Playing Paused EndGame RestartServer Game status events are usually used to kick off pre-game initialization or post-game clean-up processing.","title":"Game Status Events"},{"location":"events/#trigger-events","text":"\u201cTrigger\u201d events activate when a vehicle comes within a specified distance of an object. Triggers are created and registered for by\u201d bf2.triggerManager. createHemiSphericalTrigger(object, triggerEventHandler, objectName, radius[, data]) bf2.triggerManager.createRadiusTrigger(object, triggerEventHandler, objectName, radius[, data]) In standard Battlefield 2, trigger events are used to track scoring for flag captures (triggers activate whenever a player enters or leaves a fixed radius around each control point), as well as effects such as birds (birds are triggered to take flight whenever a player enter their trigger radius).","title":"Trigger Events"},{"location":"events/#timer-events","text":"impimport game.realitytimer as rtimer rtimer.Timer(timerEventHandler, delta, alwaysTrigger,data) Timer events activate when a certain amount of time has elapsed. In standard Battlefield 2, timer events are used to cause periodic status checks related to scoring, ranking, punishing TKs, etc. See the description of the bf2.Timer class for details.","title":"Timer Events"},{"location":"events/#descriptions-of-events","text":"EA/DICE have not published a list of events, but here is a list of events that have been discovered so far. host.EventName(handlerParameter1, handlerParameter2, ...) The EventName is the name of the event to register for with host. registerHandler; the parameters are the parameters your handler should receive when called. Parameters: playerObject \u2013 An instance of bf2.PlayerManager.Player playerID \u2013 As players connect to the server they are assigned playerID numbers from \u201c1\u201d up squadID (int) \u2013 Squads for each side are independently numbered beginning at \u201c1\u201d and increasing thereafter. Players not on a squad, including team commanders, are assigned to squad \u201c0\u201d teamID (int) \u2013 0 for US, 1 for China or MEC","title":"Descriptions of Events\u00b6"},{"location":"events/#player-events","text":"","title":"Player Events"},{"location":"events/#player-connect","text":"host.PlayerConnect(playerObject) Fires when a player connects to the game.","title":"Player Connect"},{"location":"events/#player-spawn","text":"host.PlayerSpawn(playerObject, soldierObject)\u00b6 Occurs when a player spawns, and associates a playerObject \u201cspirit\u201d with a soldierObject \u201cbody\u201d.","title":"Player Spawn"},{"location":"events/#player-change-teams","text":"host.PlayerChangeTeams(playerObject, humanHasSpawned) Parameters: humanHasSpawned \u2013 1 if the player the event is firing for is a human (as opposed to an AI). Does not fire due to team change from \u201csetTeam\u201d!","title":"Player Change Teams"},{"location":"events/#player-chang-eweapon","text":"host.PlayerChangeWeapon(playerObject, oldWeaponObject, newWeaponObject)\u00b6 Player has changed which weapon they are holding.","title":"Player Chang eWeapon"},{"location":"events/#player-changed-squad","text":"host.PlayerChangedSquad(playerObject, oldSquadID, newSquadID) SquadID is 0 for players who are not members of any squad (including the team commander).","title":"Player Changed Squad"},{"location":"events/#player-score","text":"host.PlayerScore(playerObject, difference)\u00b6 Difference is change to player\u2019s score (positive or negative).","title":"Player Score"},{"location":"events/#player-heal-point","text":"host.PlayerHealPoint(givingPlayerObject, receivingSoldierObject) Occurs whenever a player heals another player; there is no indication of how much health was restored.","title":"Player Heal Point"},{"location":"events/#player-repair-point","text":"host.PlayerRepairPoint(givingPlayerObject, receivingVehicleObject) Occurs whenever a player repairs a vehicle; there is no indication of how much damage was repaired.","title":"Player Repair Point"},{"location":"events/#player-give-ammo-point","text":"host.PlayerGiveAmmoPoint(givingPlayerObject, receivingPhysicalObject) Occurs whenever a player replenishes the ammo in another player or vehicle. There is no indication of how much ammo was replenished.","title":"Player Give Ammo Point"},{"location":"events/#player-team-damage-point","text":"host.PlayerTeamDamagePoint(playerObject, victimSoldierObject)\u00b6 Occurs whenever a player damages another player on their own team. There is no indication of how much damage was done.","title":"Player Team Damage Point"},{"location":"events/#player-killed","text":"host.PlayerKilled(victimPlayerObject, attackerPlayerObject, weaponObject, assists, victimSoldierObject) This event occurs when a player is \u201ccritically injured\u201d, but still capable of being revived. If any players assisted in the kill, then \u201cassists\u201d will be a tuple of tuples: the top-level tuple will contain one lower-level tuple for each assisting player; the lower-level tuples will each have two elements: a playerObject for one of the assisting players, and a number indicating the type of assist (1=targeting assist, 2=kill damage assist, 3=driver assist).","title":"Player Killed"},{"location":"events/#player-revived","text":"host.PlayerRevived(revivedPlayerObject, medicPlayerObject) Player has been revived from a \u201ccritically injured\u201d condition to full health by a medic using \u201cshock paddles\u201d. Players can only be revived in the interval between a PlayerKilled() event and a subsequent PlayerDeath() event.","title":"Player Revived"},{"location":"events/#player-death","text":"host.PlayerDeath(playerObject, soldierObject) This event occurs when a player is decisively dead, and cannot be revived; they will only return to the game by respawning. soldierObject is the soldier \u201cbody\u201d (which is now discarded) for the playerObject \u201cspirit\u201d (which will persist through the next spawn).","title":"Player Death"},{"location":"events/#player-banned","text":"host.PlayerBanned(playerObject, time, type)\u00b6","title":"Player Banned"},{"location":"events/#player-kicked","text":"host.PlayerKicked(playerObject) Player has been kicked off the server.","title":"Player Kicked"},{"location":"events/#player-disconnect","text":"host.PlayerDisconnect(playerObject) Player has disconnected from the server.","title":"Player Disconnect"},{"location":"events/#vehicle-and-kit-events","text":"","title":"Vehicle and Kit Events"},{"location":"events/#enter-vehicle","text":"host.EnterVehicle(playerObject, vehicleObject[, freeSoldier]) Player represented by playerObject has entered the vehicle represented by vehicleObject. freeSoldier is 1 if the player is a passenger of the vehicle and is able to use weapons/objects of his kit. i.e. seat 4(+) of a black hawk.","title":"Enter Vehicle"},{"location":"events/#exit-vehicle","text":"host.ExitVehicle(playerObject, vehicleObject) Player has exited a vehicle.","title":"Exit Vehicle"},{"location":"events/#vehicle-destroyed","text":"host.VehicleDestroyed(vehicleObject, attackerObject) vehicleObject has been destroyed by attackerObject.","title":"Vehicle Destroyed"},{"location":"events/#pickup-kit","text":"host.PickupKit(playerObject, kitObject) Player has picked up a kit. This occurs both when a player physically picks up a kit, as well as when a player spawns.","title":"Pickup Kit"},{"location":"events/#drop-kit","text":"ost.DropKit(playerObject, kitObject) Player has dropped a kit; can occur either because a player has died, or because a player has picked up a different kit.","title":"Drop Kit"},{"location":"events/#team-events","text":"","title":"Team Events"},{"location":"events/#reset","text":"host.Reset(data) TBD","title":"Reset"},{"location":"events/#changed-commander","text":"host.ChangedCommander(teamID, oldCommanderPlayerObject, newCommanderPlayerObject) Occurs when a team changes commanders; the old or new commander may be \u201cNone\u201d.","title":"Changed Commander"},{"location":"events/#changed-squad-leader","text":"host.ChangedSquadLeader(squadID, oldLeaderPlayerObject, newLeaderPlayerObject) Occurs when a squad changes squad leaders; the old or new squad leader may be \u201cNone\u201d.","title":"Changed Squad Leader"},{"location":"events/#game-events","text":"","title":"Game Events"},{"location":"events/#control-point-changedowner","text":"host.ControlPointChangedOwner(controlPointObject, attackingTeamID) TBD","title":"Control Point ChangedOwner"},{"location":"events/#time-limit-reached","text":"host.TimeLimitReached(value) Event fires when the fixed time limit for a round expires (not sure what \u201cvalue\u201d is)","title":"Time Limit Reached"},{"location":"events/#ticket-limit-reached","text":"host.TicketLimitReached(team, limitID) TBD","title":"Ticket Limit Reached"},{"location":"events/#command-events","text":"","title":"Command Events"},{"location":"events/#console-send-command","text":"host.ConsoleSendCommand(command, args) This event is triggered by someone using the pythonHost.sendCommand console command. Unfortunately, this command/event mechanism appears to be disabled in non-ranked servers. (As a workaround, you can achieve a similar effect creating and registering your own custom RCon commands.","title":"Console Send Command"},{"location":"events/#remote-command","text":"host.RemoteCommand(playerId, cmd) Event fires when a game client gives an RCon (remote console) command. cmd is the command the player gave. This event is used by the admin module to receive and process RCon commands from players; RCon commands from TCP connections are received by the admin module directly, and do not fire this event.","title":"Remote Command"},{"location":"events/#client-command","text":"host.ClientCommand(command, issuerPlayerObject, args) This event occurs when a game client issues certain in-game commands. The only such commands identified so far are: command=100 means player wants to punish teammate for teamkill; command=101 means player wants to forgive. In both cases, args=1. This response is generated by the player responding to an on-screen prompt caused by a call to the bf2.gameLogic.sendClientCommand method.","title":"Client Command"},{"location":"events/#miscellaneous-events","text":"","title":"Miscellaneous Events"},{"location":"events/#player-unlocks-response","text":"host.PlayerUnlocksResponse(succeeded, player, unlocks) Unlocks are requested and received asynchronously. This event is triggered when the response for player (which is an object of type Player) are received. If the ranking server did not successfully find the player in question, succeeded is set to false, else true. unlocks is a list of kit ids, which are 11, 22, 33 .. 77.","title":"Player Unlocks Response"},{"location":"events/#player-awards-response","text":"host.PlayerAwardsResponse() TBD","title":"Player Awards Response"},{"location":"events/#chat-message","text":"host.ChatMessage(playerId, text, channel, flags) channel is Squad, Team, Global, ServerTeamMessage or ServerMessage. Text is the text of the message sent, prefixed by HUD_TEXT_CHAT_TEAM or HUD_TEXT_CHAT_SQUAD if the message is sent to the Team or Squad channel; there is no prefix if it is sent to the Global channel. playerId is -1 for all server messages. If the player sending the message is dead, their message is also prefixed by HUD_CHAT_DEADPREFIX. (Strings such as HUD_TEXT_CHAT_TEAM, HUD_CHAT_DEADPREFIX, and so on, are used as keys by the game engine to match and replace with localized text.)","title":"Chat Message"},{"location":"events/#player-statsresponse","text":"host.PlayerStatsResponse(succeeded, player, response) TBD","title":"Player StatsResponse"},{"location":"events/#update","text":"host.Update(data) TBD","title":"Update"},{"location":"events/#non-standard-events","text":"","title":"Non-Standard Events"},{"location":"events/#game-status-changed-event","text":"host.GameStatusChangedEvent(status) This type of event is registered for with host.registerGameStatusHandler(). status is an integer status code enumerated by bf2.GameStatus.","title":"Game Status Changed Event"},{"location":"events/#trigger-event","text":"host.TriggerEvent(triggerID, object, vehicle, enter, userData) This type of event is registered for with bf2.triggerManager.createHemiSphericalTrigger or bf2.triggerManager.createRadiusTrigger; trigger triggerID is activated when vehicle comes within the preset radius of object.","title":"Trigger Event"},{"location":"events/#timer-event","text":"host.TimerEvent(data) This type of event fires when a timer established with bf2.Timer expires. \u201cdata\u201d is an optional piece of information (of any type) that can be set when the timer is established.","title":"Timer Event"},{"location":"events/#mysterious-events","text":"","title":"Mysterious Events"},{"location":"events/#read-me","text":"These strings were found in the server executable, and appear to be internal game engine events. They seem to not be accessible from Python, except in a few cases, where there is a correspondence between these \u201cevents\u201d and Python events (e.g. \u201cBeginRoundEvent\u201d may be the same as \u201cBeginRound\u201d). For more information, see BF2 Internals.","title":"read me"},{"location":"events/#remove-spawn-group-event","text":"host.RemoveSpawnGroupEvent()","title":"Remove Spawn Group Event"},{"location":"events/#create-spawn-group-event","text":"host.CreateSpawnGroupEvent()","title":"Create Spawn Group Event"},{"location":"events/#content-check-event","text":"host.ContentCheckEvent()","title":"Content Check Event"},{"location":"events/#uav-event","text":"host.UAVEvent()","title":"UAV Event"},{"location":"events/#missile-init-event","text":"host.MissileInitEvent()","title":"Missile Init Event"},{"location":"events/#unlock-event","text":"host.UnlockEvent()","title":"Unlock Event"},{"location":"events/#medal-event","text":"host.MedalEvent()","title":"Medal Event"},{"location":"events/#toggle-free-camera-event","text":"host.ToggleFreeCameraEvent()","title":"Toggle Free Camera Event"},{"location":"events/#voip-session-event","text":"host.VoipSessionEvent()","title":"Voip Session Event"},{"location":"events/#request-event","text":"host.RequestEvent()","title":"Request Event"},{"location":"events/#python-command-event","text":"host.PythonCommandEvent()","title":"Python Command Event"},{"location":"events/#end-of-round-event","text":"host.EndOfRoundEvent()","title":"End Of Round Event"},{"location":"events/#begin-round-event","text":"host.BeginRoundEvent()","title":"Begin Round Event"},{"location":"events/#target-direction-event","text":"host.TargetDirectionEvent()","title":"Target Direction Event"},{"location":"events/#vote-event","text":"host.VoteEvent()","title":"Vote Event"},{"location":"events/#voip-player-mute-event","text":"host.VoipPlayerMuteEvent()","title":"Voip Player Mute Event"},{"location":"events/#supply-drop-event","text":"host.SupplyDropEvent()","title":"Supply Drop Event"},{"location":"events/#commander-cam-event","text":"host.CommanderCamEvent()","title":"Commander Cam Event"},{"location":"events/#voip-onoff-event","text":"host.VoipOnOffEvent()","title":"Voip On/Off Event"},{"location":"events/#ambient-effect-area-event","text":"host.AmbientEffectAreaEvent()","title":"Ambient Effect Area Event"},{"location":"events/#sticky-projectile-event","text":"host.StickyProjectileEvent()","title":"Sticky Projectile Event"},{"location":"events/#artillery-event","text":"host.ArtilleryEvent()","title":"Artillery Event"},{"location":"events/#spotted-event","text":"host.SpottedEvent()","title":"Spotted Event"},{"location":"events/#set-squad-leader-event","text":"host.SetSquadLeaderEvent()","title":"Set Squad Leader Event"},{"location":"events/#set-accept-order-event","text":"host.SetAcceptOrderEvent()","title":"Set Accept Order Event"},{"location":"events/#kickban-event","text":"host.KickBanEvent()","title":"Kick/Ban Event"},{"location":"events/#rank-event","text":"host.RankEvent()","title":"Rank Event"},{"location":"events/#invite-event","text":"host.InviteEvent()","title":"Invite Event"},{"location":"events/#issue-squad-order-event","text":"host.IssueSquadOrderEvent()","title":"Issue Squad Order Event"},{"location":"events/#set-private-squad-event","text":"host.SetPrivateSquadEvent()","title":"Set Private Squad Event"},{"location":"events/#change-squad-name-event","text":"host.ChangeSquadNameEvent()","title":"Change Squad Name Event"},{"location":"events/#killed-by-event","text":"host.KilledByEvent()","title":"Killed By Event"},{"location":"events/#radio-message-event","text":"host.RadioMessageEvent()","title":"Radio Message Event"},{"location":"events/#commander-event","text":"host.CommanderEvent()","title":"Commander Event"},{"location":"events/#leave-squad-event","text":"host.LeaveSquadEvent()","title":"Leave Squad Event"},{"location":"events/#join-squad-event","text":"host.JoinSquadEvent()","title":"Join Squad Event"},{"location":"events/#string-block-event","text":"host.StringBlockEvent()","title":"String Block Event"},{"location":"events/#handle-drop-event","text":"host.HandleDropEvent()","title":"Handle Drop Event"},{"location":"events/#handle-pickup-event","text":"host.HandlePickupEvent()","title":"Handle Pickup Event"},{"location":"events/#change-player-name-event","text":"host.ChangePlayerNameEvent()","title":"Change Player Name Event"},{"location":"events/#post-remote-event","text":"host.PostRemoteEvent()","title":"Post Remote Event"},{"location":"events/#exit-vehicle-event","text":"host.ExitVehicleEvent()","title":"Exit Vehicle Event"},{"location":"events/#enter-vehicle-event","text":"host.EnterVehicleEvent()","title":"Enter Vehicle Event"},{"location":"events/#destroy-player-event","text":"host.DestroyPlayerEvent()","title":"Destroy Player Event"},{"location":"events/#destroy-object-event","text":"host.DestroyObjectEvent()","title":"Destroy Object Event"},{"location":"events/#create-kit-event","text":"host.CreateKitEvent()","title":"Create Kit Event"},{"location":"events/#create-object-event","text":"host.CreateObjectEvent()","title":"Create Object Event"},{"location":"events/#create-player-event","text":"host.CreatePlayerEvent()","title":"Create Player Event"},{"location":"events/#data-block-event","text":"host.DataBlockEvent()","title":"Data Block Event"},{"location":"events/#connection-type-event","text":"host.ConnectionTypeEvent()","title":"Connection Type Event"},{"location":"events/#challenge-response-event","text":"host.ChallengeResponseEvent()","title":"Challenge Response Event"},{"location":"events/#challenge-event","text":"host.ChallengeEvent()","title":"Challenge Event"},{"location":"hudevent/","text":"HudEvent Detailed information about the bf2.gameLogic.sendHudEvent Event by Number Close To Control Point Hud State Changed Hud Disable Hud Enable Init Loading Screen Update Loading Screen Set Loading Screen Debug Remove Loading Screen Map Zoom Changed Map Static Changed Squad Is Full Squad Is Private Squad Creation Failed Squad Creation Success Squad Invalid Name Squad Invitation Squad Join Request Squad Join Request Denied Data: 0 - 7 Data name: Squad ID Results: This event causes a \"Your request to join #SQUADNAME# squad has been denied\" message. The squad name changes depending on the supplied Squad ID. Squad Join Request Accepted Data: 0 - 7 Data name: Squad ID Results: This event causes a \"Your request to join #SQUADNAME# squad has been accepted\" message. The squad name changes depending on the supplied Squad ID. Kicked From Squad Data: 0 - 255 Data name: Player ID Results: This event causes a kicked from squad message, saying either \"... has been kicked from your squad.\" or \"You have been kicked from your squad,\" depending on the player ID. Left Squad Data: 0 - 255 Data name: Player ID Results: This event causes a player left squad message, saying \"... has left your squad.\" This message will only work if the player it is sent to is in a squad. Nothing happens if the player ID is the player the message was sent to. Joined Squad Data: 0 - 255 Data name: Player ID Results: This event causes a player joined squad message, saying \"... has joined your squad.\" This message will only work if the player it is sent to is in a squad. Nothing happens if the player ID is the player the message was sent to. Squad Orders Received Data: 0 - 255 Data name: Player ID Results: This event causes an order received message, saying \"You have received a new order from your squad leader.\" Player ID seems to have no effect on the message. Does nothing if the player message is sent to is the squad leader. New Squad Leader Data: 0 - 255 Data name: Player ID Results: This event causes a new squad leader message, saying either \"... is your new squad leader\" or \"You are the new squad leader,\" depending on the player ID. Squad Leader Request Commander Orders Received Commander Orders Sent Squad Orders Sent Request Received Request Sent Update Hud Weapon Changed Commander Accept Commander Decline Commander Invitation Squad Leader Invitation Commander Resign Rank Change Medal Reward UAV Satellite Artillery Unit Spotted Missile Lock New Unlock Call For Medic Call For Ammo Call For Repair Call For Revive Auto Call For Revive Radio Call Was Hit Possibly Not Used Possibly Not Used Possibly Not Used Possibly Not Used Is Close To Mine Data: 0 - 255 Data name: Player ID Not Close To Mine Data: 0 - 255 Data name: Player ID Muted By Remote Possibly Not Used TK Option TK Response Possibly Not Used Control Point Taken Control Point Lost Enable Help Message Data: 49 Data name: Exit To Capture Flag Enable Help Possibly Not Used Possibly Not Used Ticket Bleed Ticket State Changed Begin Round Possibly Not Used Possibly Not Used Map Change Complete Map Zoom Complete Note Some HUD events may cause informative messages to be sent to players in-game, but the HUD event does not cause these events to happen; instead, it only sends the message that would be sent if that event did happen.","title":"Hud Event"},{"location":"hudevent/#hudevent","text":"Detailed information about the bf2.gameLogic.sendHudEvent","title":"HudEvent"},{"location":"hudevent/#event-by-number","text":"Close To Control Point Hud State Changed Hud Disable Hud Enable Init Loading Screen Update Loading Screen Set Loading Screen Debug Remove Loading Screen Map Zoom Changed Map Static Changed Squad Is Full Squad Is Private Squad Creation Failed Squad Creation Success Squad Invalid Name Squad Invitation Squad Join Request Squad Join Request Denied Data: 0 - 7 Data name: Squad ID Results: This event causes a \"Your request to join #SQUADNAME# squad has been denied\" message. The squad name changes depending on the supplied Squad ID. Squad Join Request Accepted Data: 0 - 7 Data name: Squad ID Results: This event causes a \"Your request to join #SQUADNAME# squad has been accepted\" message. The squad name changes depending on the supplied Squad ID. Kicked From Squad Data: 0 - 255 Data name: Player ID Results: This event causes a kicked from squad message, saying either \"... has been kicked from your squad.\" or \"You have been kicked from your squad,\" depending on the player ID. Left Squad Data: 0 - 255 Data name: Player ID Results: This event causes a player left squad message, saying \"... has left your squad.\" This message will only work if the player it is sent to is in a squad. Nothing happens if the player ID is the player the message was sent to. Joined Squad Data: 0 - 255 Data name: Player ID Results: This event causes a player joined squad message, saying \"... has joined your squad.\" This message will only work if the player it is sent to is in a squad. Nothing happens if the player ID is the player the message was sent to. Squad Orders Received Data: 0 - 255 Data name: Player ID Results: This event causes an order received message, saying \"You have received a new order from your squad leader.\" Player ID seems to have no effect on the message. Does nothing if the player message is sent to is the squad leader. New Squad Leader Data: 0 - 255 Data name: Player ID Results: This event causes a new squad leader message, saying either \"... is your new squad leader\" or \"You are the new squad leader,\" depending on the player ID. Squad Leader Request Commander Orders Received Commander Orders Sent Squad Orders Sent Request Received Request Sent Update Hud Weapon Changed Commander Accept Commander Decline Commander Invitation Squad Leader Invitation Commander Resign Rank Change Medal Reward UAV Satellite Artillery Unit Spotted Missile Lock New Unlock Call For Medic Call For Ammo Call For Repair Call For Revive Auto Call For Revive Radio Call Was Hit Possibly Not Used Possibly Not Used Possibly Not Used Possibly Not Used Is Close To Mine Data: 0 - 255 Data name: Player ID Not Close To Mine Data: 0 - 255 Data name: Player ID Muted By Remote Possibly Not Used TK Option TK Response Possibly Not Used Control Point Taken Control Point Lost Enable Help Message Data: 49 Data name: Exit To Capture Flag Enable Help Possibly Not Used Possibly Not Used Ticket Bleed Ticket State Changed Begin Round Possibly Not Used Possibly Not Used Map Change Complete Map Zoom Complete","title":"Event by Number"},{"location":"hudevent/#note","text":"Some HUD events may cause informative messages to be sent to players in-game, but the HUD event does not cause these events to happen; instead, it only sends the message that would be sent if that event did happen.","title":"Note"}]}